# https://taskfile.dev

version: "3"
run: when_changed
# includes:
# feature:
# taskfile: tasks/feature.yaml
# selection:
# taskfile: tasks/selection.yaml
# cifar10:
#   taskfile: tasks/default.yaml
# cifar10_clip:
#   taskfile: tasks/cifar10/clip.yaml
# cifar10_resnet:
#   taskfile: tasks/cifar10/resnet.yaml
# finetuning:
# taskfile: tasks/finetuning.yaml

vars:
  backbone: '{{.backbone | default "clip"}}'
  seed: "{{.seed | default 0}}"
  debug: "{{.debug | default false}}"
  main: '{{.main | default "data_select.py"}}'
  overwrite: "{{.overwrite | default false}}"
  dataset: '{{.dataset | default "cifar10"}}'
  selection: '{{.selection | default "random"}}'
  additional: '{{.additional | default ""}}'
  c: '{{.c | default "0.99" }}'
  c_conditioned: '{{.c_conditioned | default "False"}}'
  sketching_dim: "{{.sketching_dim | default 512}}"
  mix_fraction: "{{.mix_fraction | default 0.4}}"
  fraction: "{{.fraction | default 1000}}"
  layers: "{{.layers | default -2}}"
  k: "{{.k | default 512}}"
  max_epochs: "{{.max_epochs | default 2000}}"
  # ft_fraction: "{{.ft_fraction | default '50,100,200,500,1000'}}"

includes:
  cifar10:resnet18:cov: taskfiles/cifar10:resnet18:cov.taskfile
  cifar10:resnet18:cov_ntk: taskfiles/cifar10:resnet18:cov_ntk.taskfile
  cifar10:resnet18:cov_ntk_perclass: taskfiles/cifar10:resnet18:cov_ntk_perclass.taskfile
  stanfordcars:clip:cov: taskfiles/stanfordcars:clip:cov.taskfile
  stanfordcars:clip:cov_ntk: taskfiles/stanfordcars:clip:cov_ntk.taskfile
  stanfordcars:resnet18:cov_ntk: taskfiles/stanfordcars:resnet18:cov_ntk.taskfile

tasks:
  feature:
    cmds:
      - |
        python main.py \
        mode=feature_extraction \
        dataset={{.dataset}} \
        backbone={{.backbone}}

  stanfordcars:clip:grads:
    cmds:
      - |
        python grad_utils.py -m dataset=stanfordcars backbone=clip +sketching_dim=32,64,128,256,512 +layers=-2,-3 +use_target=random +cls_pretrain_size=full hydra/launcher=ai

  ls:
    cmds:
      - |
        python {{.main}} -m \
        dataset=cifar10 \
        backbone={{.backbone}} \
        selection=leverage_score \
        selection.space=feature \
        selection.fraction=0.001,0.01,0.1,0.2,0.4,0.6,0.8 \
        selection.source=pretrained \
        selection.B=10 \
        selection.k={{.k}} \
        selection.use_raw_G=False \
        selection.use_residual=False \
        hydra/launcher={{.server}}
    silent: true

  ls-cifar10-0.001:
    cmds:
      - |
        python {{.main}} -m \
        dataset=cifar10 \
        backbone={{.backbone}} \
        selection=leverage_score \
        selection.space=feature \
        selection.fraction=0.001 \
        selection.source=pretrained \
        selection.B=10 \
        selection.k={{.k}} \
        selection.use_raw_G=False \
        selection.use_residual=False \
        overwrite={{.overwrite}} \
        debug={{.debug}} \
        hydra/launcher={{.server}}
    silent: false
  leverage_score-cifar10_binary-0.001:
    cmds:
      - |
        python {{.main}} -m \
        dataset=cifar10 \
        backbone={{.backbone}} \
        selection=leverage_score \
        selection.space=binary \
        selection.fraction=0.001 \
        selection.source=pretrained \
        selection.B=10 \
        selection.k={{.k}} \
        selection.use_raw_G=False \
        selection.use_residual=False \
        overwrite={{.overwrite}} \
        hydra/launcher={{.server}}
  # cov:
  #   cmds:
  #   - |
  #     python {{.main}} -m \
  #       dataset={{.dataset}} \
  #       backbone={{.backbone}} \
  #       selection=cov \
  #       selection.fraction=1000 \
  #       selection.max_epochs=50000 \
  #       selection.sparse_scale=1e-1 \
  #       selection.eigen_cutoff=-1 \
  #       selection.s_lr=1e-4 \
  #       selection.gamma_lr=1e-4 \
  #       selection.c={{.c}} \
  #       overwrite={{.overwrite}} \
  #       seed={{.seed}} \
  #       hydra/launcher={{.server}} {{.additional}}
  cov_uniform:
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection=cov \
          selection.fraction=50,100,200,500,1000,2000,3000,4000 \
          selection.max_epochs=50000 \
          selection.sparse_scale=1e-1,1e-2,1e-3 \
          selection.eigen_cutoff=-1 \
          selection.s_lr=1e-2 \
          selection.gamma_lr=1e-4 \
          selection.c=1.00 \
          +selection.uniform_scale=1e-3,1e-4,1e-5,1e-6 \
          overwrite={{.overwrite}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}
  cov_debug:
    cmds:
      - |
        python {{.main}} -m \
        dataset={{.dataset}} \
        backbone={{.backbone}} \
        selection=cov \
        selection.fraction=1000 \
        selection.max_epochs=50000 \
        selection.sparse_scale=1e-1 \
        selection.eigen_cutoff=-1 \
        selection.s_lr=1e-3 \
        selection.gamma_lr=1e-3 \
        selection.c=1.00 \
        overwrite={{.overwrite}} \
        hydra/launcher={{.server}} {{.additional}}
  cov_h:
    cmds:
      - |
        python {{.main}} -m \
        dataset={{.dataset}} \
        backbone={{.backbone}} \
        selection=cov \
        selection.fraction=50,100,200,500,1000,2000,3000,4000 \
        selection.max_epochs=50000 \
        selection.sparse_scale=1e-3 \
        selection.eigen_cutoff=-1 \
        selection.s_lr=1e-2 \
        selection.gamma_lr=1e-4 \
        selection.c=1.05 \
        seed={{.seed}} \
        overwrite={{.overwrite}} \
        hydra/launcher={{.server}} {{.additional}}
  cov_sketching:
    cmds:
      - |
        python {{.main}} -m \
        dataset={{.dataset}} \
        backbone={{.backbone}} \
        selection=cov \
        selection.fraction=50,100,200 \
        selection.max_epochs=5000 \
        selection.sparse_scale=1e-3,1e-2,1e-1,1e0 \
        selection.eigen_cutoff=-1 \
        selection.s_lr=1e-3 \
        selection.gamma_lr=1e-3 \
        +selection.sketching_dim={{.sketching_dim}} \
        selection.c=0.95,1.00,1.05 \
        seed={{.seed}} \
        overwrite={{.overwrite}} \
        hydra/launcher={{.server}} {{.additional}}
  cov_d:
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection=cov \
          selection.fraction=50 \
          selection.max_epochs=50000 \
          selection.sparse_scale=1e-1 \
          selection.eigen_cutoff=-1 \
          selection.s_lr=1e-2 \
          selection.gamma_lr=1e-4 \
          selection.c=0.85 \
          overwrite={{.overwrite}} \
          hydra/launcher={{.server}} {{.additional}}
  cov_good:
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection=cov \
          selection.fraction=50,100,200,500,1000,2000,3000,4000 \
          selection.max_epochs=10000 \
          selection.sparse_scale=1e-3 \
          selection.eigen_cutoff=-1 \
          selection.s_lr=1e-2 \
          selection.gamma_lr=1e-4 \
          selection.c=1.00 \
          overwrite={{.overwrite}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}
  cov_mixed:
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection=cov \
          selection.fraction=1000 \
          selection.max_epochs=50000 \
          selection.sparse_scale=1e-3 \
          selection.eigen_cutoff=-1 \
          selection.s_lr=1e0 \
          selection.gamma_lr=1e-2 \
          +selection.uniform_c_conditioned_fraction={{.mix_fraction}} \
          selection.c=1.00 \
          overwrite={{.overwrite}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}
  cov_mixed_sweep:
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection=cov \
          selection.fraction=1000 \
          selection.max_epochs=100000 \
          selection.sparse_scale=1e-1,1e-2,1e-3 \
          selection.eigen_cutoff=-1 \
          selection.s_lr=1e0 \
          selection.gamma_lr=1e0 \
          +selection.uniform_c_conditioned_fraction={{.mix_fraction}} \
          selection.c=0.95,1.00,1.05 \
          overwrite={{.overwrite}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}
  cov_finetune_debug:
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection=cov \
          selection.fraction=1000 \
          selection.max_epochs=1 \
          selection.sparse_scale=1e-2 \
          selection.eigen_cutoff=-1 \
          selection.s_lr=1e-2 \
          selection.c=0.95 \
          overwrite={{.overwrite}} \
          +selection.c_conditioned=True \
          finetuning=debug \
          hydra/launcher={{.server}}

  random:
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection=random \
          seed={{.seed}} \
            selection.fraction={{.fraction}} \
            debug={{.debug}} \
          overwrite={{.overwrite}} \
          hydra/launcher={{.server}} {{.additional}}

  stanfordcars:clip:full:selection:
    cmds:
      - |
        task random backbone=clip seed=0,1,2,3,4 fraction=1.0 dataset=stanfordcars server=basic

  stanfordcars:clip:full:ft2:
    vars:
      additional: |
        \
        finetuning=clip_ft_adam_-2_decay \
        +selection.c_conditioned=False \
        finetuning.optimizer.weight_decay=0 \
        finetuning.optimizer.feature_weight_decay=1 \
        finetuning.optimizer.feature_lr_decay=1 \
        finetuning.optimizer.lr=1e-1 \
        finetuning.max_epochs=50
    cmds:
      - |
        task random backbone=clip seed=0,1,2,3,4 fraction=1.0 dataset=stanfordcars main=finetune.py additional='{{.additional}}' server={{.server}}

  random:debug:
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection=random \
          seed={{.seed}} \
          selection.fraction=1000 \
          overwrite={{.overwrite}} \
          hydra/launcher={{.server}} {{.additional}}

  forgetting:
    desc: "Forget the first 1000 samples"
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection=forgetting \
          selection.fraction=1000,2000,3000,4000 \
          debug=True \
          overwrite={{.overwrite}} \
          hydra/launcher={{.server}} {{.additional}}
  full_finetune:
    cmds:
      - |
        task {{.selection}} dataset={{.dataset}} backbone={{.backbone}} server={{.server}} main=finetune.py additional='finetuning=ft_cifar10 finetuning.max_epochs=100 +selection.c_conditioned=True'
  last_finetune:
    summary: "Finetune the last 1000 samples"
    cmds:
      - |
        task {{.selection}} dataset={{.dataset}} backbone={{.backbone}} server={{.server}} main=finetune.py additional='finetuning=ft_cifar10_-1_raw finetuning.max_epochs=100 +selection.c_conditioned=True'
  last_finetune:deepcore:
    cmds:
      - |
        task {{.selection}} dataset={{.dataset}} backbone={{.backbone}} server={{.server}} main=finetune.py additional='finetuning=ft_deepcore_-1 finetuning.max_epochs=100 +selection.c_conditioned=True'
  second_last_finetune:
    cmds:
      - |
        task {{.selection}} dataset={{.dataset}} backbone={{.backbone}} server={{.server}} main=finetune.py additional='finetuning=ft_cifar10_-2 finetuning.max_epochs=100 finetuning.optimizer.weight_decay=0 +selection.c_conditioned=True'
  selection:deepcore_uniform:
    cmds:
      - |
        python {{.main}} -m \
          dataset=cifar10 \
          backbone={{.backbone}} \
          selection=deepcore_uniform \
          selection.fraction=1000,2000,3000,4000 \
          seed={{.seed}},1,2,3,4 \
          debug={{.debug}} \
          hydra/launcher={{.server}}

  selection:deepcore_forgetting:
    cmds:
      - |
        python {{.main}} -m \
          dataset=cifar10 \
          backbone={{.backbone}} \
          selection=deepcore_forgetting \
          selection.fraction=1000,2000,3000,4000 \
          seed={{.seed}},1,2,3,4 \
          debug={{.debug}} \
          overwrite={{.overwrite}} \
          hydra/launcher={{.server}}

  selection:deepcore_dewool:
    cmds:
      - |
        python {{.main}} -m \
          dataset=cifar10 \
          backbone={{.backbone}} \
          selection=deepcore_deepfool \
          selection.fraction=1000,2000,3000,4000 \
          seed={{.seed}},1,2,3,4 \
          debug={{.debug}} \
          overwrite={{.overwrite}} \
          hydra/launcher={{.server}}

  selection:deepcore_glister:
    cmds:
      - |
        python {{.main}} -m \
          dataset=cifar10 \
          backbone={{.backbone}} \
          selection=deepcore_glister \
          selection.fraction=1000,2000,3000,4000 \
          seed={{.seed}},1,2,3,4 \
          debug={{.debug}} \
          hydra/launcher={{.server}}

  selection:deepcore_grand:
    cmds:
      - |
        python {{.main}} -m \
          dataset=cifar10 \
          backbone={{.backbone}} \
          selection=deepcore_grand \
          selection.fraction=1000,2000,3000,4000 \
          seed={{.seed}},1,2,3,4 \
          debug={{.debug}} \
          overwrite={{.overwrite}} \
          hydra/launcher={{.server}}
  deepcore_all:
    deps:
      - deepcore_deepfool
      - deepcore_glister
      - deepcore_forgetting
      - deepcore_grand
  deepcore_all_collect:
    cmds:
      - |
        task collect dataset=cifar10 backbone={{.backbone}} method=deepcore_deepfool server={{.server}}
        task collect dataset=cifar10 backbone={{.backbone}} method=deepcore_glister server={{.server}}
        task collect dataset=cifar10 backbone={{.backbone}} method=deepcore_forgetting server={{.server}}
        task collect dataset=cifar10 backbone={{.backbone}} method=deepcore_grand server={{.server}}
  collect_lp:
    # desc: task {{.dataset}}:{{.method}} main=collect.py server=basic
    cmds:
      - |
        rm -rf temp
        mkdir -p temp
        task {{.method}} backbone={{.backbone}} main=collect.py server={{.server}}
        python plot.py
  collect_ft_-1:
    cmds:
      - |
        task {{.selection}} dataset={{.dataset}} backbone={{.backbone}} server={{.server}} main=collect.py additional='finetuning=ft_adam_-1 +selection.c_conditioned={{.c_conditioned}}'
        python plot.py +dataset={{.dataset}} +backbone={{.backbone}} +method=[{{.method}}]
    vars:
      server: basic
  collect_ft_-2:
    cmds:
      - "task {{.selection}} dataset={{.dataset}} backbone={{.backbone}} server={{.server}} main=collect.py additional='finetuning=ft_adam_-2 +selection.c_conditioned={{.c_conditioned}}'\npython plot.py \n"
  collect_all:
    desc: task main=collect.py server=basic
    cmds:
      - |
        rm -rf configs_tosubmit
        cp -r configs configs_tosubmit
        find configs_tosubmit -maxdepth 1 -type f -name '*.yaml' -delete
        task collect dataset=cifar10 backbone=resnet50 method=random server=joblib
        task collect dataset=cifar10 backbone=resnet50 method=cov server=joblib
        task collect dataset=cifar10 backbone=resnet50 method=deepcore_deepfool server=joblib
        task collect dataset=cifar10 backbone=resnet50 method=deepcore_glister server=joblib
        task collect dataset=cifar10 backbone=resnet50 method=deepcore_forgetting server=joblib
        task collect dataset=cifar10 backbone=resnet50 method=deepcore_grand server=joblib
        task collect dataset=cifar10 backbone=resnet50_swav method=random server=joblib
        task collect dataset=cifar10 backbone=resnet50_swav method=cov server=joblib
        task collect dataset=cifar10 backbone=clip method=random server=joblib
        task collect dataset=cifar10 backbone=clip method=cov server=joblib
  tosubmit:
    desc: "Submit all configurations from the to_submit directory"
    cmds:
      - |
        mkdir -p configs_submitted
        for config_file in configs_tosubmit/*.yaml; do
          config_name=$(basename "$config_file" .yaml)
          echo "Running configuration: $config_name"
          python opt.py -m --config-path configs_tosubmit --config-name $config_name hydra/launcher=$server &
        done
  deepcore:
    desc: "prepare configs for deepcore"
    cmds:
      - |
        cd libs/DeepCore
        python check.py
  plot:
    cmds:
      - |
        python plot.py +dataset={{.dataset}} +backbone={{.backbone}} +method=[{{.method}}]
  plot_resnet50:
    cmds:
      - |
        python plot.py +dataset={{.dataset}} +backbone=resnet50 +method=[random,cov,DeepFool,Glister,Forgetting,GraNd]
  migrate:
    desc: "Migrate configurations from one directory to another"
    cmds:
      - |
        python migrate.py -m \
          dataset=cifar10 \
          backbone=resnet50_swav_old \
          +new_backbone=resnet50_swav \
          selection=random,cov \
          seed={{.seed}},1,2,3,4 \
          selection.fraction=1000,2000,3000,4000 \
          hydra/launcher={{.server}}
  cache_grads:
    desc: "Cache gradients for the entire dataset"
    cmds:
      - |
        python utils/grad_utils.py -m \
        dataset={{.dataset}} \
        backbone={{.backbone}} \
        hydra/launcher={{.server}}
  finetune_debug:
    cmds:
      - |
        python finetune.py -m \
        dataset=cifar10 \
        backbone=resnet18 \
        selection=cov_ntk \
        selection.fraction=100 \
        selection.max_epochs=10000 \
        selection.sparse_scale=1e-2 \
        selection.eigen_cutoff=-1 \
        selection.s_lr=1e-2 \
        selection.c=1.00 \
        +selection.c_conditioned=False \
        finetuning=ft_cifar10 \
        finetuning.max_epochs=100 \
        overwrite={{.overwrite}} \
        seed={{.seed}} \
        hydra/launcher={{.server}}
  cov_ntk:
    vars:
      use_target: random
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection=cov_ntk \
          selection.fraction={{.fraction}} \
          selection.max_epochs=1 \
          selection.sparse_scale=1e-3 \
          selection.eigen_cutoff=-1 \
          selection.k={{.k}} \
          selection.layers={{.layers}} \
          selection.s_lr=1e-10 \
          selection.gamma_lr=1e-10 \
          selection.c={{.c}} \
          selection.use_target={{.use_target}} \
          overwrite={{.overwrite}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}
  cov_ntk_clip:
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection=cov_ntk \
          selection.fraction={{.fraction}} \
          selection.max_epochs=50000 \
          selection.sparse_scale=1e-1 \
          selection.eigen_cutoff=-1 \
          selection.k={{.k}} \
          selection.use_target=True \
          selection.layers={{.layers}} \
          selection.s.optimizer.params.lr=1e-4 \
          selection.gamma.optimizer.params.lr=1e-4 \
          selection.s_init_method=uniform \
          selection.c={{.c}} \
          overwrite={{.overwrite}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}
  cov:
    vars:
      max_epochs: 50000
      simplex_method: softmax_reparam
      sketching_dim: 192
      s_init_method: random_m
      gamma_init_method: uniform
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection=cov \
            selection.fraction={{.fraction}} \
            selection.max_epochs={{.max_epochs}} \
            selection.eigen_cutoff=-1 \
            selection.sketching_dim={{.sketching_dim}} \
            selection.simplex_method={{.simplex_method}} \
            selection.optimizer.lr=1e-2 \
            selection.sparse_scale=0 \
            selection.s_init_method={{.s_init_method}} \
            selection.gamma_init_method=uniform \
            selection.c={{.c}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}
  cov_sweep:
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection=cov \
            selection.fraction={{.fraction}} \
            selection.max_epochs={{.max_epochs}} \
            selection.eigen_cutoff=-1 \
            selection.sketching_dim={{.sketching_dim}} \
            selection.simplex_method=softmax_reparam,softmax_pgd,sort_pgd \
            selection.optimizer.lr=1e-2 \
            selection.sparse_scale=1e-1,1e-2,1e-3,1e-4,1e-5,0 \
            selection.s_init_method=uniform,random_m \
            selection.gamma_init_method=uniform \
            selection.c={{.c}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  cov_sweep1:
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection=cov \
            selection.fraction={{.fraction}} \
            selection.max_epochs={{.max_epochs}} \
            selection.eigen_cutoff=-1 \
            selection.sketching_dim={{.sketching_dim}} \
            selection.simplex_method=softmax_reparam \
            selection.optimizer.lr=1e-2 \
            selection.sparse_scale=1e-3 \
            selection.s_init_method=random_m \
            selection.gamma_init_method=uniform \
            selection.c=0.9,0.99,0.999,0.9999,1.0,1.001,1.01,1.1 \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  stanfordcars:prepare_dataset:
    summary: Prepare the StanfordCars dataset https://github.com/pytorch/vision/issues/7545#issuecomment-1631441616.
    desc: Prepare the StanfordCars dataset
    cmds:
      - cd $DATAROOT
      - kaggle datasets download -d jessicali9530/stanford-cars-dataset
      - mkdir stanford_cars
      - unzip stanford-cars-dataset.zip -d stanford_cars
      - cd stanford_cars
      - mv cars_train/cars_train/* cars_train
      - mv cars_test/cars_test/* cars_test
      - wget https://github.com/pytorch/vision/files/11644847/car_devkit.tgz
      - tar -xvzf car_devkit.tgz
      - kaggle datasets download -d abdelrahmant11/standford-cars-dataset-meta
      - unzip standford-cars-dataset-meta.zip

  stanfordcars:clip:cov:selection-debug:
    desc: For CLIP models
    vars:
      max_epochs: 2000
      fraction: 1000
      simplex_method: sort_pgd
      s_init_method: top_1_m
      gamma_init_method: uniform
      lr: 1e-2
      sparse_scale: 0
      sketching_dim: 512
      c: 0.5
      seed: 0
      server: basic
    cmds:
      - |
        python {{.main}} -m \
          dataset=stanfordcars \
          backbone={{.backbone}} \
          selection=cov \
            selection.fraction={{.fraction}} \
            selection.max_epochs={{.max_epochs}} \
            selection.eigen_cutoff=-1 \
            selection.sketching_dim={{.sketching_dim}} \
            selection.simplex_method={{.simplex_method}} \
            selection.optimizer.lr={{.lr}} \
            selection.sparse_scale={{.sparse_scale}} \
            selection.s_init_method={{.s_init_method}} \
            selection.gamma_init_method=uniform \
            selection.c={{.c}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  stanfordcars:clip:cov:selection:
    desc: For CLIP models
    vars:
      max_epochs: 2000
      fraction: 1000
      simplex_method: sort_pgd
      s_init_method: random_m
      gamma_init_method: uniform
      lr: 1e-2
      sparse_scale: 1e-3
      sketching_dim: 512
      c: 0.9
      seed: 0
    cmds:
      - |
        python {{.main}} -m \
          dataset=stanfordcars \
          backbone={{.backbone}} \
          selection=cov \
            selection.fraction={{.fraction}} \
            selection.max_epochs={{.max_epochs}} \
            selection.eigen_cutoff=-1 \
            selection.sketching_dim={{.sketching_dim}} \
            selection.simplex_method=sort_pgd \
            selection.optimizer.lr={{.lr}} \
            selection.sparse_scale={{.sparse_scale}} \
            selection.s_init_method=random_m \
            selection.gamma_init_method=uniform \
            selection.c={{.c}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  stanfordcars:clip:cov:ft-1:
    desc: For CLIP models
    vars:
      max_epochs: 2000
      fraction: 500,1000,2000,3000,4000
      simplex_method: sort_pgd
      s_init_method: random_m
      gamma_init_method: uniform
      lr: 1e-2
      sparse_scale: 1e-3
      sketching_dim: 32
      c: 0.8
      seed: 0,1,2,3,4
      main: finetune.py
      additional: |
        finetuning=clip_ft_adam_-1 \
        +selection.c_conditioned=sampled
    cmds:
      - |
        python {{.main}} -m \
          dataset=stanfordcars \
          backbone={{.backbone}} \
          selection=cov \
            selection.fraction={{.fraction}} \
            selection.max_epochs={{.max_epochs}} \
            selection.eigen_cutoff=-1 \
            selection.sketching_dim={{.sketching_dim}} \
            selection.simplex_method=sort_pgd \
            selection.optimizer.lr={{.lr}} \
            selection.sparse_scale={{.sparse_scale}} \
            selection.s_init_method=random_m \
            selection.gamma_init_method=uniform \
            selection.c={{.c}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  stanfordcars:clip:cov:ft-1-debug:
    desc: For CLIP models
    vars:
      max_epochs: 2000
      fraction: 1000
      simplex_method: sort_pgd
      s_init_method: random_m
      gamma_init_method: uniform
      lr: 1e-2
      sparse_scale: 1e-3
      sketching_dim: 256
      c: 0.8
      seed: 0
      main: finetune.py
      additional: |
        finetuning=clip_ft_adam_-1 \
        +selection.c_conditioned=false \
    cmds:
      - |
        python {{.main}} -m \
          dataset=stanfordcars \
          backbone={{.backbone}} \
          selection=cov \
            selection.fraction={{.fraction}} \
            selection.max_epochs={{.max_epochs}} \
            selection.eigen_cutoff=-1 \
            selection.sketching_dim={{.sketching_dim}} \
            selection.simplex_method=sort_pgd \
            selection.optimizer.lr={{.lr}} \
            selection.sparse_scale={{.sparse_scale}} \
            selection.s_init_method=random_m \
            selection.gamma_init_method=uniform \
            selection.c={{.c}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  # stanfordcars:clip:grads:
  # cmds:
  # - |
  #   python grad_utils.py -m \
  #   dataset=stanfordcars \
  #   backbone=clip \
  #   +sketching_dim=64,128,256,512 \
  #   +layers=-2 \
  #   +use_target=random \
  #   hydra/launcher=basic

  stanfordcars:resnet18:cov:
    vars:
      max_epochs: 2000
      simplex_method: sort_pgd
      s_init_method: random_m
      gamma_init_method: uniform
      lr: 1e-1
      sparse_scale: 0
    cmds:
      - |
        python {{.main}} -m \
          dataset=stanfordcars \
          backbone=resnet18 \
          selection=cov \
            selection.fraction={{.fraction}} \
            selection.max_epochs={{.max_epochs}} \
            selection.sketching_dim={{.sketching_dim}} \
            selection.simplex_method={{.simplex_method}} \
            selection.optimizer.lr={{.lr}} \
            selection.sparse_scale={{.sparse_scale}} \
            selection.s_init_method={{.s_init_method}} \
            selection.gamma_init_method={{.gamma_init_method}} \
            selection.c={{.c}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  stanfordcars:resnet18:cov_ntk:
    vars:
      max_epochs: 1000
      simplex_method: sort_pgd
      s_init_method: random_m
      gamma_init_method: uniform
      lr: 1e-1
      sparse_scale: 0
      use_target: random
    cmds:
      - |
        python {{.main}} -m \
          dataset=stanfordcars \
          backbone=resnet18 \
          selection=cov_ntk \
            selection.fraction={{.fraction}} \
            selection.max_epochs={{.max_epochs}} \
            selection.sketching_dim={{.sketching_dim}} \
            selection.simplex_method={{.simplex_method}} \
            selection.optimizer.lr={{.lr}} \
            selection.sparse_scale={{.sparse_scale}} \
            selection.s_init_method={{.s_init_method}} \
            selection.gamma_init_method={{.gamma_init_method}} \
            selection.use_target={{.use_target}} \
            selection.c={{.c}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  stanfordcars:resnet18:cov_ntk:sweep:
    vars:
      seed: 0,1,2,3,4
      fraction: 500,1000,2000,3000,4000
      max_epochs: 1000
      simplex_method: sort_pgd
      s_init_method: random_m
      gamma_init_method: uniform
      lr: 1e-1
      sparse_scale: 0
      use_target: random
      c: 0.5,0.6,0.7,0.8,0.9
      sketching_dim: 64,128,256,512
    cmds:
      - |
        python {{.main}} -m \
          dataset=stanfordcars \
          backbone=resnet18 \
          selection=cov_ntk \
            selection.fraction={{.fraction}} \
            selection.max_epochs={{.max_epochs}} \
            selection.sketching_dim={{.sketching_dim}} \
            selection.simplex_method={{.simplex_method}} \
            selection.optimizer.lr={{.lr}} \
            selection.sparse_scale={{.sparse_scale}} \
            selection.s_init_method={{.s_init_method}} \
            selection.gamma_init_method={{.gamma_init_method}} \
            selection.use_target={{.use_target}} \
            selection.c={{.c}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  stanfordcars:resnet18:cov_ntk:sweep_ft:
    vars:
      seed: 0,1,2,3,4
      fraction: 500,1000,2000,3000,4000
      max_epochs: 1000
      simplex_method: sort_pgd
      s_init_method: random_m
      gamma_init_method: uniform
      lr: 1e-1
      sparse_scale: 0
      use_target: random
      c: 0.5,0.6,0.7,0.8,0.9
      sketching_dim: 64,128,256,512
      additional: finetuning=ft_adam finetuning.max_epochs=50 finetuning.optimizer.lr=1e-2 finetuning.batch_size=512 finetuning.layers=-2 +selection.c_conditioned=sampled
      main: finetune.py
    cmds:
      - |
        python {{.main}} -m \
          dataset=stanfordcars \
          backbone=resnet18 \
          selection=cov_ntk \
            selection.fraction={{.fraction}} \
            selection.max_epochs={{.max_epochs}} \
            selection.sketching_dim={{.sketching_dim}} \
            selection.simplex_method={{.simplex_method}} \
            selection.optimizer.lr={{.lr}} \
            selection.sparse_scale={{.sparse_scale}} \
            selection.s_init_method={{.s_init_method}} \
            selection.gamma_init_method={{.gamma_init_method}} \
            selection.use_target={{.use_target}} \
            selection.c={{.c}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  stanfordcars:resnet18:cov_ntk:ft:
    vars:
      fraction: 500,1000,2000,3000,4000
      selection: cov_ntk
      additional: finetuning=ft_adam finetuning.max_epochs=50 finetuning.optimizer.lr=1e-2 finetuning.batch_size=512 finetuning.layers=-2
      seed: 0,1,2,3,4
      main: finetune.py
      max_epochs: 1000
      simplex_method: sort_pgd
      s_init_method: random_m
      gamma_init_method: uniform
      lr: 1e-1
      sparse_scale: 0
      use_target: random
      c: 0.9
      sketching_dim: 64,128,256,512
    cmds:
      - |
        python {{.main}} -m \
          dataset=stanfordcars \
          backbone=resnet18 \
          selection=cov_ntk \
            selection.fraction={{.fraction}} \
            selection.max_epochs={{.max_epochs}} \
            selection.sketching_dim={{.sketching_dim}} \
            selection.simplex_method={{.simplex_method}} \
            selection.optimizer.lr={{.lr}} \
            selection.sparse_scale={{.sparse_scale}} \
            selection.s_init_method={{.s_init_method}} \
            selection.gamma_init_method={{.gamma_init_method}} \
            selection.use_target={{.use_target}} \
            +selection.c_conditioned=sampled \
            selection.c={{.c}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}
        
  cifar10:clip:deepcore:ft1:
    vars:
      #fraction: 500,1000,1500,2000,2500,3000,3500,4000
      fraction: 200
      selection: deepcore
      backbone: clip
      method: Uniform,ContextualDiversity,Glister,GraNd,Herding,Forgetting,DeepFool,Uncertainty-Entropy,Uncertainty-Margin,Uncertainty-LeastConfidence
      seed: 0,1,2,3,4
      main: finetune.py
      dataset: cifar10
      additional: |
        \
          finetuning=clip_ft_adam_-1 \
          +selection.c_conditioned=False \
          finetuning.optimizer.lr=1e-1 \
          finetuning.max_epochs=50 \
          finetuning.layers=-1
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.method={{.method}} \
            selection.fraction={{.fraction}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  cifar10:clip:deepcore:ft1:debug:
    vars:
      fraction: 50
      selection: deepcore
      method: Uniform
      additional: |
        \
            finetuning=clip_ft_adam_-1 \
            +selection.c_conditioned=False \
            finetuning.optimizer.lr=1e-2 \
            finetuning.max_epochs=50 \
            finetuning.layers=-1
      seed: 0
      main: finetune.py
      server: basic
      backbone: clip
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.method={{.method}} \
            selection.fraction={{.fraction}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}
      

  stanfordcars:resnet18:deepcore:ft1:
    vars:
      #fraction: 500,1000,1500,2000,2500,3000,3500,4000
      fraction: 50,100,200
      selection: deepcore
      method: Uniform,ContextualDiversity,Glister,GraNd,Herding,Forgetting,DeepFool,Uncertainty-Entropy,Uncertainty-Margin,Uncertainty-LeastConfidence
      additional: |
        \
            finetuning=clip_ft_adam_-1 \
            +selection.c_conditioned=False \
            finetuning.optimizer.lr=1e-2 \
            finetuning.max_epochs=50 \
            finetuning.layers=-1
      seed: 0,1,2,3,4
      main: finetune.py
      backbone: resnet18
    cmds:
      - |
        python {{.main}} -m \
          dataset=stanfordcars \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.method={{.method}} \
            selection.fraction={{.fraction}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  stanfordcars:resnet18:deepcore:ft1:debug:
    vars:
      fraction: 500
      selection: deepcore
      method: Uniform
      additional: |
        \
            finetuning=clip_ft_adam_-1 \
            +selection.c_conditioned=False \
            finetuning.optimizer.lr=1e-2 \
            finetuning.max_epochs=50 \
            finetuning.layers=-1
      seed: 0
      main: finetune.py
      server: basic
      backbone: resnet18
    cmds:
      - |
        python {{.main}} -m \
          dataset=stanfordcars \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.method={{.method}} \
            selection.fraction={{.fraction}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}
  
  stanfordcars:resnet18:deepcore:ft2:missing:
    vars:
      fraction: 500,1000
      selection: deepcore
      method: Uncertainty-LeastConfidence,DeepFool,Uncertainty-Margin
      seed: 0,1,2,3,4
      main: finetune.py
      dataset: stanfordcars
      additional: |
        \
            finetuning=clip_ft_adam_-2_decay \
            +selection.c_conditioned=False \
            finetuning.optimizer.weight_decay=0 \
            finetuning.optimizer.feature_weight_decay=0 \
            finetuning.optimizer.feature_lr_decay=1 \
            finetuning.optimizer.lr=1e-2 \
            finetuning.max_epochs=50
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.method={{.method}} \
            selection.fraction={{.fraction}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}
      

  stanfordcars:resnet18:deepcore:ft2:
    vars:
      # fraction: 500,1000,1500,2000,2500,3000,3500,4000
      # fraction: 1500,2500,3500
      fraction: 2000,2500,3000,3500,4000
      selection: deepcore
      # method: Glister,Uncertainty-Margin
      method: DeepFool
      # method: Uniform,ContextualDiversity,Glister,GraNd,Herding,Forgetting,DeepFool,Uncertainty-Entropy,Uncertainty-Margin,Uncertainty-LeastConfidence
      additional: |
        \
            finetuning=clip_ft_adam_-2_decay \
            +selection.c_conditioned=False \
            finetuning.optimizer.weight_decay=0 \
            finetuning.optimizer.feature_weight_decay=0 \
            finetuning.optimizer.feature_lr_decay=1 \
            finetuning.optimizer.lr=1e-2 \
            finetuning.max_epochs=50
      seed: 0,1,2,3,4
      main: finetune.py
      backbone: resnet18
    cmds:
      - |
        python {{.main}} -m \
          dataset=stanfordcars \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.method={{.method}} \
            selection.fraction={{.fraction}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}
  
  stanfordcars:resnet18:deepcore:ft2:debug:
    vars:
      fraction: 500
      selection: deepcore
      method: Uniform
      seed: 0
      main: finetune.py
      dataset: stanfordcars
      additional: |
        \
            finetuning=clip_ft_adam_-2_decay \
            +selection.c_conditioned=False \
            finetuning.optimizer.weight_decay=0 \
            finetuning.optimizer.feature_weight_decay=0 \
            finetuning.optimizer.feature_lr_decay=1 \
            finetuning.optimizer.lr=1e-2 \
            finetuning.max_epochs=50
      server: basic
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.method={{.method}} \
            selection.fraction={{.fraction}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  stanfordcars:clip:deepcore:ft1:
    decs: "Finetune the DeepCore selection, clip, adam, -1 layer, 50 epochs"
    vars:
      fraction: 500,1000,1500,2000,2500,3000,3500,4000
      fraction: 500,1000,1500,2000,2500,3000,3500,4000
      selection: deepcore
      backbone: clip
      method: Uniform,ContextualDiversity,Glister,GraNd,Herding,Forgetting,DeepFool,Uncertainty-Entropy,Uncertainty-Margin,Uncertainty-LeastConfidence
      seed: 0,1,2,3,4
      main: finetune.py
      dataset: stanfordcars
      additional: |
        \
            finetuning=clip_ft_adam_-1 \
            +selection.c_conditioned=False \
            finetuning.optimizer.lr=1e-1 \
            finetuning.max_epochs=50 \
            finetuning.layers=-1
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.method={{.method}} \
            selection.fraction={{.fraction}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  cifar10:resnet18:deepcore:ft1:
    decs: "Finetune the DeepCore selection, resnet18, ft_adam_-1, 50 epochs"
    vars:
      fraction: 500,1000,1500,2000,2500,3000,3500,4000
      selection: deepcore
      backbone: resnet18
      method: Uniform,ContextualDiversity,Glister,GraNd,Herding,Forgetting,DeepFool,Uncertainty-Entropy,Uncertainty-Margin,Uncertainty-LeastConfidence
      seed: 0,1,2,3,4
      main: finetune.py
      dataset: cifar10
      additional: |
        \
            finetuning=clip_ft_adam_-1 \
            +selection.c_conditioned=False \
            finetuning.optimizer.lr=1e-2 \
            finetuning.max_epochs=200 \
            finetuning.layers=-1
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.method={{.method}} \
            selection.fraction={{.fraction}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  cifar10:resnet18:random-conditioned:ft2:debug:
    vars:
      fraction: 500
      selection: random
      backbone: resnet18
      seed: 0
      main: finetune.py
      dataset: cifar10
      additional: |
        \
            finetuning=clip_ft_adam_-2_decay \
            +selection.c_conditioned=True \
            finetuning.optimizer.weight_decay=0 \
            finetuning.optimizer.feature_weight_decay=0 \
            finetuning.optimizer.feature_lr_decay=1 \
            finetuning.optimizer.lr=1e-2 \
            finetuning.max_epochs=50
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.fraction={{.fraction}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  cifar10:resnet18:random-conditioned:ft2:
    vars:
      fraction: 500,1000,1500,2000,2500,3000,3500,4000
      selection: random
      backbone: resnet18
      seed: 0,1,2,3,4
      main: finetune.py
      dataset: cifar10
      additional: |
        \
            finetuning=clip_ft_adam_-2_decay \
            +selection.c_conditioned=True \
            finetuning.optimizer.weight_decay=0 \
            finetuning.optimizer.feature_weight_decay=0 \
            finetuning.optimizer.feature_lr_decay=1 \
            finetuning.optimizer.lr=1e-2 \
            finetuning.max_epochs=50
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.fraction={{.fraction}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  cifar10:resnet18:random-conditioned:ft2:wd-sweep:
    vars:
      fraction: 500,1000,1500,2000,2500,3000,3500,4000
      selection: random
      backbone: resnet18
      seed: 0,1,2,3,4
      main: finetune.py
      dataset: cifar10
      additional: |
        \
            finetuning=clip_ft_adam_-2_decay \
            +selection.c_conditioned=True \
            finetuning.optimizer.weight_decay=0 \
            finetuning.optimizer.feature_weight_decay=1e-5,1e-4,1e-3 \
            finetuning.optimizer.feature_lr_decay=1 \
            finetuning.optimizer.lr=1e-2 \
            finetuning.max_epochs=50
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.fraction={{.fraction}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  cifar10:resnet18:deepcore:ft1:debug:
    decs: "Finetune the DeepCore selection, resnet18, ft_adam_-1, 50 epochs"
    vars:
      fraction: 1000
      selection: deepcore
      backbone: resnet18
      method: Uniform
      seed: 0
      main: finetune.py
      dataset: cifar10
      additional: |
        \
            finetuning=clip_ft_adam_-1 \
            +selection.c_conditioned=False \
            finetuning.optimizer.lr=1e-2 \
            finetuning.max_epochs=200 \
            finetuning.layers=-1
      server: basic
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.method={{.method}} \
            selection.fraction={{.fraction}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  cifar10:resnet18:deepcore:ft1:missing:
    decs: "Finetune the DeepCore selection, resnet18, ft_adam_-1, 50 epochs"
    vars:
      fraction: 500,1000,1500,2500,3000,3500,4000
      selection: deepcore
      backbone: resnet18
      method: Forgetting
      seed: 0,1,2,3,4
      main: finetune.py
      dataset: cifar10
      additional: |
        \
            finetuning=clip_ft_adam_-1 \
            +selection.c_conditioned=False \
            finetuning.optimizer.lr=1e-2 \
            finetuning.max_epochs=200 \
            finetuning.layers=-1
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.method={{.method}} \
            selection.fraction={{.fraction}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  cifar10:resnet18:deepcore:ft-2:
    decs: "finetune the deepcore selection, resnet18, ft_adam_-2_decay, 50 epochs"
    vars:
      fraction: 200
      selection: deepcore
      backbone: resnet18
      method: uniform,contextualdiversity,glister,grand,herding,forgetting,deepfool,uncertainty-entropy,uncertainty-margin,uncertainty-leastconfidence
      seed: 0,1,2,3,4
      main: finetune.py
      dataset: cifar10
      additional: |
        \
            finetuning=clip_ft_adam_-2_decay \
            +selection.c_conditioned=false \
            finetuning.optimizer.weight_decay=0 \
            finetuning.optimizer.feature_weight_decay=0 \
            finetuning.optimizer.feature_lr_decay=1 \
            finetuning.optimizer.lr=1e-2 \
            finetuning.max_epochs=50
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.method={{.method}} \
            selection.fraction={{.fraction}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  cifar10:resnet18:deepcore:c_conditioned:ft2:
    decs: "finetune the deepcore selection, resnet18, ft_adam_-2_decay, 50 epochs"
    vars:
      fraction: 500,1000,1500,2000,2500,3000,3500,4000
      selection: deepcore
      backbone: resnet18
      # method: forgetting" "deepfool" "entropy" "margin" "leastconfidence")
      method: Forgetting,DeepFool,Uncertainty-Entropy,Uncertainty-Margin,Uncertainty-LeastConfidence
      # method: Uniform,ContextualDiversity,Glister,GraNd,Herding,Forgetting,DeepFool,Uncertainty-Entropy,Uncertainty-Margin,Uncertainty-LeastConfidence
      seed: 0,1,2,3,4
      main: finetune.py
      dataset: cifar10
      additional: |
        \
            finetuning=clip_ft_adam_-2_decay \
            +selection.c_conditioned=true \
            finetuning.optimizer.weight_decay=0 \
            finetuning.optimizer.feature_weight_decay=0 \
            finetuning.optimizer.feature_lr_decay=1 \
            finetuning.optimizer.lr=1e-2 \
            finetuning.max_epochs=50
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.method={{.method}} \
            selection.fraction={{.fraction}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  cifar10:resnet18:deepcore:c_conditioned:ft2:debug:
    decs: "Finetune the DeepCore selection, resnet18, ft_adam_-2_decay, 50 epochs"
    vars:
      fraction: 500
      selection: deepcore
      backbone: resnet18
      method: Uniform
      seed: 0
      main: finetune.py
      dataset: cifar10
      additional: |
        \
            finetuning=clip_ft_adam_-2_decay \
            +selection.c_conditioned=True \
            finetuning.optimizer.weight_decay=0 \
            finetuning.optimizer.feature_weight_decay=0 \
            finetuning.optimizer.feature_lr_decay=1 \
            finetuning.optimizer.lr=1e-2 \
            finetuning.max_epochs=50
      server: basic
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.method={{.method}} \
            selection.fraction={{.fraction}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  cifar10:resnet18:deepcore:ft2:small_range:
    decs: "finetune the deepcore selection, resnet18, ft_adam_-2_decay, 50 epochs"
    vars:
      fraction: 50,100,200
      selection: deepcore
      backbone: resnet18
      method: Uniform,ContextualDiversity,Glister,GraNd,Herding,Forgetting,DeepFool,Uncertainty-Entropy,Uncertainty-Margin,Uncertainty-LeastConfidence
      seed: 0,1,2,3,4
      main: finetune.py
      dataset: cifar10
      additional: |
        \
            finetuning=clip_ft_adam_-2_decay \
            +selection.c_conditioned=false \
            finetuning.optimizer.weight_decay=0 \
            finetuning.optimizer.feature_weight_decay=0 \
            finetuning.optimizer.feature_lr_decay=1 \
            finetuning.optimizer.lr=1e-2 \
            finetuning.max_epochs=50
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.method={{.method}} \
            selection.fraction={{.fraction}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}
  
  cifar10:resnet18:deepcore:ft2:debug:
    decs: "Finetune the DeepCore selection, resnet18, ft_adam_-2_decay, 50 epochs"
    vars:
      fraction: 200
      selection: deepcore
      backbone: resnet18
      method: Uniform
      seed: 0
      main: finetune.py
      dataset: cifar10
      additional: |
        \
            finetuning=clip_ft_adam_-2_decay \
            +selection.c_conditioned=False \
            finetuning.optimizer.weight_decay=0 \
            finetuning.optimizer.feature_weight_decay=0 \
            finetuning.optimizer.feature_lr_decay=1 \
            finetuning.optimizer.lr=1e-2 \
            finetuning.max_epochs=50
      server: basic
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.method={{.method}} \
            selection.fraction={{.fraction}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  stanfordcars:clip:deepcore:ft1:new_range:
    decs: "Finetune the DeepCore selection, clip, adam, -1 layer, 50 epochs"
    vars:
      fraction: 1500,2500,3500
      selection: deepcore
      backbone: clip
      method: Uniform,ContextualDiversity,Glister,GraNd,Herding,Forgetting,DeepFool,Uncertainty-Entropy,Uncertainty-Margin,Uncertainty-LeastConfidence
      seed: 0,1,2,3,4
      main: finetune.py
      additional: |
        \
            finetuning=clip_ft_adam_-1 \
            +selection.c_conditioned=False \
            finetuning.optimizer.lr=1e-1 \
            finetuning.max_epochs=50 \
            finetuning.layers=-1
    cmds:
      - |
        python {{.main}} -m \
          dataset=stanfordcars \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.method={{.method}} \
            selection.fraction={{.fraction}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  stanfordcars:clip:deepcore:ft1:debug:
    decs: "Finetune the DeepCore selection, clip, adam, -1 layer, 50 epochs"
    vars:
      fraction: 500
      selection: deepcore
      backbone: clip
      method: Uniform
      seed: 0
      main: finetune.py
      additional: |
        \
            finetuning=clip_ft_adam_-1 \
            +selection.c_conditioned=False \
            finetuning.optimizer.lr=1e-1 \
            finetuning.max_epochs=50 \
            finetuning.layers=-1
      server: basic
    cmds:
      - |
        python {{.main}} -m \
          dataset=stanfordcars \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.method={{.method}} \
            selection.fraction={{.fraction}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  stanfordcars:clip:deepcore:ft-2:
    decs: "Finetune the DeepCore selection, clip, adam, -2 layer, 50 epochs, with encoder learning rate decay 1e-3"
    vars:
      fraction: 500,1000,2000,3000,4000
      selection: deepcore
      backbone: clip
      method: Uniform,ContextualDiversity,Glister,GraNd,Herding,Forgetting,DeepFool,Uncertainty-Entropy,Uncertainty-Margin,Uncertainty-LeastConfidence
      additional: finetuning=clip_ft_adam_-2_decay +selection.c_conditioned=Falsea
      seed: 0,1,2,3,4
      main: finetune.py
      max_epochs: 50
    cmds:
      - |
        python {{.main}} -m \
          dataset=stanfordcars \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.method={{.method}} \
            selection.fraction={{.fraction}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  stanfordcars:clip:deepcore:ft-3:
    decs: "Finetune the DeepCore selection, clip, adam, -3 layer, 50 epochs, with encoder learning rate decay 1e-3"
    vars:
      fraction: 500,1000,2000,3000,4000
      selection: deepcore
      backbone: clip
      method: Uniform,ContextualDiversity,Glister,GraNd,Herding,Forgetting,DeepFool,Uncertainty-Entropy,Uncertainty-Margin,Uncertainty-LeastConfidence
      seed: 0,1,2,3,4
      max_epochs: 50
      main: finetune.py
      additional: |
        \
        finetuning=clip_ft_adam_-2 \
        +selection.c_conditioned=False \
        finetuning.layers=-3 \
        finetuning.optimizer.feature_lr_decay=1e-3
    cmds:
      - |
        python {{.main}} -m \
          dataset=stanfordcars \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.method={{.method}} \
            selection.fraction={{.fraction}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  stanfordcars:resnet18:deepcore:ft_debug:
    vars:
      fraction: 500
      selection: deepcore
      method: Uncertainty-Entropy
      additional: finetuning=ft_adam finetuning.max_epochs=50 finetuning.optimizer.lr=1e-2 finetuning.batch_size=512 finetuning.layers=-1
      seed: 0
      main: finetune.py
      backbone: resnet18
      max_epochs: 50
    cmds:
      - |
        python {{.main}} -m \
          dataset=stanfordcars \
          backbone=resnet18 \
          selection={{.selection}} \
            selection.method={{.method}} \
            selection.fraction={{.fraction}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  stanfordcars:cov:sweep:
    cmds:
      - |
        python {{.main}} -m \
          dataset=stanfordcars \
          backbone={{.backbone}} \
          selection=cov \
            selection.fraction={{.fraction}} \
            selection.max_epochs={{.max_epochs}} \
            selection.eigen_cutoff=-1 \
            selection.sketching_dim=64,128,256,512 \
            selection.simplex_method=sort_pgd \
            selection.optimizer.lr=1e-2 \
            selection.sparse_scale=1e-3 \
            selection.s_init_method=random_m \
            selection.gamma_init_method=uniform \
            selection.c=0.7 \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  stanfordcars:clip:cov_ntk:debug:
    vars:
      seed: 0
      backbone: clip
      fraction: 500
      max_epochs: 2000
      simplex_method: sort_pgd
      s_init_method: random_m
      gamma_init_method: uniform
      lr: 1e-2
      sparse_scale: 0
      use_target: random
      c: 0.5
      sketching_dim: 64
    cmds:
      - |
        python {{.main}} -m \
          dataset=stanfordcars \
          backbone={{.backbone}} \
          selection=cov_ntk \
            selection.fraction={{.fraction}} \
            selection.max_epochs={{.max_epochs}} \
            selection.eigen_cutoff=-1 \
            selection.sketching_dim={{.sketching_dim}} \
            selection.simplex_method=sort_pgd \
            selection.optimizer.lr=1e-2 \
            selection.sparse_scale={{.sparse_scale}} \
            selection.s_init_method={{.s_init_method}} \
            selection.gamma_init_method={{.gamma_init_method}} \
            selection.c={{.c}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  stanfordcars:clip:cov_ntk:sweep:
    vars:
      seed: 0,1,2,3,4
      backbone: clip
      fraction: 500,1000,2000,3000,4000
      max_epochs: 1000
      simplex_method: sort_pgd
      s_init_method: random_m
      gamma_init_method: uniform
      lr: 1e-1
      sparse_scale: 1e-3
      use_target: random
      c: 0.5,0.6,0.7,0.8,0.9,0.99
      sketching_dim: 512
    cmds:
      - |
        python {{.main}} -m \
          dataset=stanfordcars \
          backbone={{.backbone}} \
          selection=cov_ntk \
            selection.fraction={{.fraction}} \
            selection.max_epochs={{.max_epochs}} \
            selection.eigen_cutoff=-1 \
            selection.sketching_dim={{.sketching_dim}} \
            selection.simplex_method={{.simplex_method}} \
            selection.optimizer.lr={{.lr}} \
            selection.sparse_scale={{.sparse_scale}} \
            selection.s_init_method={{.s_init_method}} \
            selection.gamma_init_method={{.gamma_init_method}} \
            selection.c={{.c}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  # stanfordcars:clip:cov_ntk:ft-2:
  #   vars:
  #     seed: 0
  #     backbone: clip
  #     fraction: 500,1000,2000,3000,4000
  #     max_epochs: 2000
  #     simplex_method: sort_pgd
  #     s_init_method: random_m
  #     gamma_init_method: uniform
  #     lr: 1e-2
  #     sparse_scale: 1e-3
  #     use_target: random
  #     c: 0.6,0.7,0.8,0.9
  #     sketching_dim: 64,128,256,512
  #   cmds:
  #     - |
  #       python {{.main}} -m \
  #         dataset=stanfordcars \
  #         backbone={{.backbone}} \
  #         selection=cov_ntk \
  #           selection.fraction={{.fraction}} \
  #           selection.max_epochs={{.max_epochs}} \
  #           selection.eigen_cutoff=-1 \
  #           selection.sketching_dim={{.sketching_dim}} \
  #           selection.simplex_method={{.simplex_method}} \
  #           selection.optimizer.lr={{.lr}} \
  #           selection.sparse_scale={{.sparse_scale}} \
  #           selection.s_init_method={{.s_init_method}} \
  #           selection.gamma_init_method={{.gamma_init_method}} \
  #           selection.c={{.c}} \
  #         overwrite={{.overwrite}} \
  #         debug={{.debug}} \
  #         seed={{.seed}} \
  #         hydra/launcher={{.server}} {{.additional}}

  stanfordcars:clip:cov_ntk:selection:sweep:
    vars:
      seed: 0
      backbone: clip
      fraction: 500,1000,2000,3000,4000
      max_epochs: 2000
      simplex_method: sort_pgd
      s_init_method: random_m
      gamma_init_method: uniform
      lr: 1e-2
      sparse_scale: 0,1e-3
      use_target: random
      c: 0.5,0.6,0.7,0.8,0.9,0.99
      sketching_dim: 64,128,256,512
    cmds:
      - |
        python {{.main}} -m \
          dataset=stanfordcars \
          backbone={{.backbone}} \
          selection=cov_ntk \
            selection.fraction={{.fraction}} \
            selection.max_epochs={{.max_epochs}} \
            selection.eigen_cutoff=-1 \
            selection.sketching_dim={{.sketching_dim}} \
            selection.simplex_method={{.simplex_method}} \
            selection.optimizer.lr={{.lr}} \
            selection.sparse_scale={{.sparse_scale}} \
            selection.s_init_method={{.s_init_method}} \
            selection.gamma_init_method={{.gamma_init_method}} \
            selection.c={{.c}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  stanfordcars:clip:random:selection:
    vars:
      seed: 0,1,2,3,4
      backbone: clip
      fraction: 500,1000,2000,3000,4000
    cmds:
      - task random dataset=stanfordcars backbone={{.backbone}} server={{.server}} seed={{.seed}} fraction={{.fraction}} overwrite={{.overwrite}} debug={{.debug}}

  stanfordcars:clip:random:ft-1:
    deps:
      - stanfordcars:clip:random:selection
    vars:
      seed: 0,1,2,3,4
      backbone: clip
      fraction: 500,1000,2000,3000,4000
      main: finetune.py
      additional: |
        \
        finetuning=clip_ft_adam_-1 \
        +selection.c_conditioned=false
    cmds:
      - |
        python {{.main}} -m \
          dataset=stanfordcars \
          backbone={{.backbone}} \
          selection=random \
            selection.fraction={{.fraction}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  stanfordcars:clip:random:ft-2:
    vars:
      seed: 0,1,2,3,4
      backbone: clip
      fraction: 500,1000,2000,3000,4000
      main: finetune.py
      additional: |
        \
        finetuning=clip_ft_adam_-2_decay \
        +selection.c_conditioned=false \
        finetuning.optimizer.weight_decay=0 \
        finetuning.optimizer.feature_lr_decay=1e-3
    cmds:
      - |
        python {{.main}} -m \
          dataset=stanfordcars \
          backbone={{.backbone}} \
          selection=random \
            selection.fraction={{.fraction}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  stanfordcars:clip:random:ft-3:
    vars:
      seed: 0,1,2,3,4
      backbone: clip
      fraction: 500,1000,2000,3000,4000
      main: finetune.py
      additional: |
        \
        finetuning=clip_ft_adam_-2 \
        +selection.c_conditioned=false \
        finetuning.layers=-3
        finetuning.optimizer.feature_lr_decay=1e-3
    cmds:
      - |
        python {{.main}} -m \
          dataset=stanfordcars \
          backbone={{.backbone}} \
          selection=random \
            selection.fraction={{.fraction}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  stanfordcars:clip:random:ft-3:weight_decay:
    vars:
      additional: |
        \
          finetuning=clip_ft_adam_-3_weight_decay \
          finetuning.max_epochs=50 \
          +selection.c_conditioned=false \
          finetuning.optimizer.weight_decay=0 \
          finetuning.optimizer.feature_lr_decay=1e-3,1e-2,1e-1,1 \
          finetuning.optimizer.lr=1e-1 \
          finetuning.optimizer.feature_weight_decay=0,1e-6,1e-5,1e-4,1e-3,1e-2,1e-1
      main: finetune.py
      seed: 0
    cmds:
      - |
        python {{.main}} -m \
          dataset=stanfordcars \
          backbone={{.backbone}} \
          selection=random \
            selection.fraction=1000 \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  stanfordcars:clip:random:ft-3-decay:
    vars:
      seed: 0,1,2,3,4
      backbone: clip
      fraction: 500,1000,2000,3000,4000
      main: finetune.py
      additional: |
        \
        finetuning=clip_ft_adam_-2 \
        +selection.c_conditioned=false \
        finetuning.layers=-3 \
        finetuning.optimizer.feature_lr_decay=1e-3
    cmds:
      - |
        python {{.main}} -m \
          dataset=stanfordcars \
          backbone={{.backbone}} \
          selection=random \
            selection.fraction={{.fraction}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  stanfordcars:clip:random:ft-2-lora:
    vars:
      seed: 0
      backbone: clip
      fraction: 1000
      main: finetune.py
      additional: |
        \
        finetuning=clip_ft_adam_-2_decay \
        +selection.c_conditioned=false
    cmds:
      - |
        python {{.main}} -m \
          dataset=stanfordcars \
          backbone={{.backbone}} \
          selection=random \
            selection.fraction={{.fraction}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  stanfordcars:clip:cov_ntk:feature_scale:selection:
    desc: Debug feature scaling
    vars:
      seed: 0
      backbone: clip
      fraction: 500,1000,2000,3000,4000
      max_epochs: 2000
      simplex_method: sort_pgd
      s_init_method: random_m
      gamma_init_method: uniform
      lr: 1e-2
      sparse_scale: 1e-3
      use_target: random
      c: 0.9
      sketching_dim: 64,128,256,512
      feature_scale: 1e-3,3e-2
    cmds:
      - |
        python {{.main}} -m \
          dataset=stanfordcars \
          backbone={{.backbone}} \
          selection=cov_ntk \
            selection.fraction={{.fraction}} \
            selection.max_epochs={{.max_epochs}} \
            selection.eigen_cutoff=-1 \
            selection.sketching_dim={{.sketching_dim}} \
            selection.simplex_method={{.simplex_method}} \
            selection.optimizer.lr={{.lr}} \
            selection.sparse_scale={{.sparse_scale}} \
            selection.s_init_method={{.s_init_method}} \
            selection.gamma_init_method={{.gamma_init_method}} \
            +selection.feature_scale={{.feature_scale}} \
            selection.c={{.c}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}
  stanfordcars:clip:cov_ntk:feature_scale:ft-2:sweep:
    # deps:
    # - stanfordcars:clip:cov_ntk:feature_scale:selection
    desc: Debug feature scaling
    vars:
      seed: 0
      backbone: clip
      fraction: 500,1000,2000,3000,4000
      max_epochs: 2000
      simplex_method: sort_pgd
      s_init_method: random_m
      gamma_init_method: uniform
      lr: 1e-2
      sparse_scale: 1e-3
      use_target: random
      c: 0.9
      sketching_dim: 64,128,256,512
      feature_scale: 1e-3,3e-2
      main: finetune.py
      additional: finetuning=clip_ft_adam_-2_decay +selection.c_conditioned=sampled
    cmds:
      - |
        python {{.main}} -m \
          dataset=stanfordcars \
          backbone={{.backbone}} \
          selection=cov_ntk \
            selection.fraction={{.fraction}} \
            selection.max_epochs={{.max_epochs}} \
            selection.eigen_cutoff=-1 \
            selection.sketching_dim={{.sketching_dim}} \
            selection.simplex_method={{.simplex_method}} \
            selection.optimizer.lr={{.lr}} \
            selection.sparse_scale={{.sparse_scale}} \
            selection.s_init_method={{.s_init_method}} \
            selection.gamma_init_method={{.gamma_init_method}} \
            +selection.feature_scale={{.feature_scale}} \
            selection.c={{.c}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}
  stanfordcars:clip:cov_ntk:ft-2:sweep:
    deps:
      - stanfordcars:clip:cov_ntk:selection
    vars:
      seed: 0,1,2,3,4
      backbone: clip
      fraction: 500,1000,2000,3000,4000
      max_epochs: 1000
      simplex_method: sort_pgd
      s_init_method: random_m
      gamma_init_method: uniform
      lr: 1e-1,1e-2
      sparse_scale: 1e-3
      use_target: random
      c: 0.9,0.99
      sketching_dim: 64,128,256,512
      main: finetune.py
      additional: finetuning=clip_ft_adam_-2_decay +selection.c_conditioned=sampled
    cmds:
      - |
        python {{.main}} -m \
          dataset=stanfordcars \
          backbone={{.backbone}} \
          selection=cov_ntk \
            selection.fraction={{.fraction}} \
            selection.max_epochs={{.max_epochs}} \
            selection.eigen_cutoff=-1 \
            selection.sketching_dim={{.sketching_dim}} \
            selection.simplex_method={{.simplex_method}} \
            selection.optimizer.lr={{.lr}} \
            selection.sparse_scale={{.sparse_scale}} \
            selection.s_init_method={{.s_init_method}} \
            selection.gamma_init_method={{.gamma_init_method}} \
            selection.c={{.c}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}
  cov_ntk_yj:
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection=cov_ntk \
            selection.fraction={{.fraction}} \
            selection.max_epochs=50000 \
            selection.sparse_scale=0 \
            selection.eigen_cutoff=-1 \
            selection.k={{.k}} \
            selection.use_target=True \
            selection.layers={{.layers}} \
            selection.s.optimizer.name=Adam \
            selection.s.optimizer.params.lr=1e-2 \
            selection.gamma.optimizer.name=Adam \
            selection.gamma.optimizer.params.lr=1e-2 \
            selection.s_init_method=random_m \
            selection.c={{.c}} \
          overwrite={{.overwrite}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}
  cov_ntk_debug:
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection=cov_ntk \
          selection.fraction={{.fraction}} \
          selection.max_epochs=200000 \
          selection.sparse_scale=1e-3 \
          selection.eigen_cutoff=-1 \
          selection.k={{.k}} \
          +selection.layers={{.layers}} \
          selection.s_lr=1e-6 \
          selection.gamma_lr=1e-9 \
          selection.c={{.c}} \
          overwrite={{.overwrite}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}
  cov_ntk_tiny:
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection=cov_ntk \
          selection.fraction=50,100,200,500,1000,2000,3000,4000 \
          selection.max_epochs=50000 \
          selection.sparse_scale=1e-1 \
          selection.eigen_cutoff=-1 \
          selection.s_lr=1e-5 \
          selection.gamma_lr=1e-7 \
          selection.c=0.6,0.7 \
          overwrite={{.overwrite}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}
  cov_ntk_tiny_good:
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection=cov_ntk \
          selection.fraction=50,100,200,500,1000,2000,3000,4000 \
          selection.max_epochs=50000 \
          selection.sparse_scale=1e-1 \
          selection.eigen_cutoff=-1 \
          selection.s_lr=1e-5 \
          selection.gamma_lr=1e-7 \
          selection.c=0.8 \
          overwrite={{.overwrite}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}
  cov_ntk_sweep:
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection=cov_ntk \
          selection.fraction=50,100,200,500,1000,2000,3000,4000 \
          selection.max_epochs=50000 \
          selection.sparse_scale=1e-2,1e-1 \
          selection.eigen_cutoff=-1 \
          selection.s_lr=1e-2 \
          selection.gamma_lr=1e-4 \
          selection.c=0.8,0.9,1.0,1.1,1.2 \
          overwrite={{.overwrite}} \
          hydra/launcher={{.server}} {{.additional}}
  cov_ntk_good:
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection=cov_ntk \
          selection.fraction=50,100,200,500,1000,2000,3000,4000 \
          selection.max_epochs=50000 \
          selection.sparse_scale=1e-3 \
          selection.eigen_cutoff=-1 \
          selection.s_lr=1e-2 \
          selection.gamma_lr=1e-4 \
          selection.c=1.1 \
          overwrite={{.overwrite}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}
  cov_ntk_test:
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection=cov_ntk \
          selection.fraction=50,100,200,500,1000,2000,3000,4000 \
          selection.max_epochs=50000 \
          selection.sparse_scale=1e-3 \
          selection.eigen_cutoff=-1 \
          selection.s_lr=1e-2 \
          selection.gamma_lr=1e-4 \
          selection.c=0.85 \
          overwrite={{.overwrite}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}
  ft_adam_-1_cov_ntk_good:
    deps:
      - cov_ntk_good
    cmds:
      - |
        task {{.selection}} dataset={{.dataset}} backbone={{.backbone}} server={{.server}} main=finetune.py additional='finetuning=ft_adam_-1_cov_ntk +selection.c_conditioned={{.c_conditioned}}'
  ft_adam_-2_cov_ntk_good:
    deps:
      - cov_ntk_good
    cmds:
      - |
        task {{.selection}} dataset={{.dataset}} backbone={{.backbone}} server={{.server}} main=finetune.py additional='finetuning=ft_adam_-2 finetuning.max_epochs=100 +selection.c_conditioned={{.c_conditioned}}'
  ft_deepcore_-1:
    cmds:
      - |
        task {{.selection}} dataset={{.dataset}} backbone={{.backbone}} server={{.server}} overwrite={{.overwrite}} main=finetune.py additional='finetuning=ft_deepcore_-1 +selection.c_conditioned={{.c_conditioned}}'
  ft_adam_-1:
    cmds:
      - |
        task {{.selection}} dataset={{.dataset}} backbone={{.backbone}} server={{.server}} overwrite={{.overwrite}} main=finetune.py additional='finetuning=ft_adam_-1 +selection.c_conditioned={{.c_conditioned}}'
  ft_deepcore_-2:
    cmds:
      - |
        task {{.selection}} dataset={{.dataset}} backbone={{.backbone}} server={{.server}} overwrite={{.overwrite}} main=finetune.py additional='finetuning=ft_deepcore_-2 +selection.c_conditioned={{.c_conditioned}}'
  ft_adam_-2:
    cmds:
      - |
        task {{.selection}} \
        dataset={{.dataset}} \
        layers={{.layers}} \
        backbone={{.backbone}} \
        c={{.c}} \
        k={{.k}} \
        seed={{.seed}} \
        fraction={{.fraction}} \
        server={{.server}} overwrite={{.overwrite}} \
        main=finetune.py \
        additional='finetuning=ft_adam_-2 +selection.c_conditioned={{.c_conditioned}}'
  ft_adam_all:
    cmds:
      - |
        task {{.selection}} \
        dataset={{.dataset}} \
        layers={{.layers}} \
        backbone={{.backbone}} \
        c={{.c}} \
        k={{.k}} \
        seed={{.seed}} \
        fraction={{.fraction}} \
        server={{.server}} overwrite={{.overwrite}} \
        main=finetune.py \
        additional='finetuning=ft_adam_all +selection.c_conditioned={{.c_conditioned}}'
  ft_adam_-2_sampling:
    cmds:
      - |
        task {{.selection}} \
        dataset={{.dataset}} \
        layers={{.layers}} \
        backbone={{.backbone}} \
        c={{.c}} \
        k={{.k}} \
        seed={{.seed}} \
        fraction={{.fraction}} \
        server={{.server}} overwrite={{.overwrite}} \
        main=finetune.py \
        additional='finetuning=ft_adam_all +selection.c_conditioned={{.c_conditioned}} +selection.sampling=True'
  cov_ntk-ft_adam_all:
    cmds:
      - |
        task cov_ntk_debug backbone=tinynet server=basic layers=all c={{.c}} k={{.k}} dataset=cifar100 fraction=1000
        task cov_ntk_debug backbone=tinynet server=basic layers=all c={{.c}} k={{.k}} dataset=cifar100 fraction=500,1000,2000,3000,4000 \
        main=finetune.py additional='finetuning=ft_adam_all +selection.c_conditioned={{.c_conditioned}}'
  ft_adam_-1_debug:
    cmds:
      - |
        python finetune.py -m \
        dataset=cifar10 \
        backbone=clip \
        selection=random \
        seed=0 \
        selection.fraction=1000 \
        +selection.c_conditioned=True
        debug=false \
        overwrite=false \
        hydra/launcher=basic \
        finetuning=ft_adam_-1 \
        finetuning.optimizer.lr=1e-2

  ft1:
    decs: Finetune with Adam
    env:
      #* Does not work
      dataset: cifar10
      max_epochs: 99
    cmds:
      - |
        python finetune.py -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
          seed={{.seed}} \
          selection.fraction={{.fraction}} \
          finetuning=clip_ft_adam_-1 \
          finetuning.batch_size=512 \
          finetuning.max_epochs={{.max_epochs}} \
          finetuning.optimizer.lr={{.lr}} \
          +selection.c_conditioned=False \
          debug=false \
          overwrite=false \
          hydra/launcher={{.server}}
  ft-2:
    vars:
      additional: finetuning=ft_adam_-2 +selection.c_conditioned={{.c_conditioned}} finetuning.max_epochs=50 finetuning.optimizer.lr=1e-1 finetuning.batch_size=512
      server: basic
      main: finetune.py
    cmds:
      - |
        task {{.selection}} \
        main={{.main}} \
        fraction={{.fraction}} \
        dataset={{.dataset}} \
        seed={{.seed}} \
        additional='{{.additional}}' \
        server={{.server}}
  stanfordcars:clip:ft-1:
    vars:
      additional: finetuning=clip_ft_adam_-1 +selection.c_conditioned={{.c_conditioned}}
      server: basic
      main: finetune.py
      dataset: stanfordcars
    cmds:
      - |
        task {{.selection}} \
        main={{.main}} \
        fraction={{.fraction}} \
        dataset={{.dataset}} \
        seed={{.seed}} \
        additional='{{.additional}}' \
        server={{.server}}
  stanfordcars:clip:ft-2:
    vars:
      additional: finetuning=clip_ft_adam_-2_decay +selection.c_conditioned={{.c_conditioned}}
      server: basic
      main: finetune.py
      dataset: stanfordcars
    cmds:
      - |
        task {{.selection}} \
        main={{.main}} \
        fraction={{.fraction}} \
        dataset={{.dataset}} \
        seed={{.seed}} \
        additional='{{.additional}}' \
        server={{.server}}
  ft-2:decay:test:
    vars:
      additional: finetuning=ft_adam_-2_decay +selection.c_conditioned={{.c_conditioned}} finetuning.max_epochs=100 finetuning.optimizer.lr=1e-1,1e-2 finetuning.batch_size=512 finetuning.optimizer.feature_lr_decay=1e-1,1e-2,1e-3,1e-4
      # server: basic
      main: finetune.py
    cmds:
      - |
        task {{.selection}} \
        main={{.main}} \
        fraction={{.fraction}} \
        dataset={{.dataset}} \
        seed={{.seed}} \
        additional='{{.additional}}' \
        server={{.server}}

  stanfordcars:resnet18:cov_ntk:selection:
    vars:
      fraction: 500,1000,2000,3000,4000
      seed: 0,1,2,3,4
    cmds:
      - |
        task stanfordcars:resnet18:cov_ntk \
        main={{.main}} \
        fraction={{.fraction}} \
        dataset=stanfordcars \
        seed={{.seed}} \
        additional='{{.additional}}' \
        server={{.server}}

  stanfordcars:resnet18:cov:ft-1:
    vars:
      additional: finetuning=ft_adam_-1 +selection.c_conditioned=sampled finetuning.max_epochs=50 finetuning.optimizer.lr=1e-2 finetuning.batch_size=512
      main: finetune.py
      fraction: 500,1000,2000,3000,4000
      seed: 0,1,2,3,4
    cmds:
      - |
        task stanfordcars:resnet18:cov \
        main={{.main}} \
        fraction={{.fraction}} \
        dataset=stanfordcars \
        seed={{.seed}} \
        additional='{{.additional}}' \
        server={{.server}}

  stanfordcars:resnet18:cov_ntk:ft-2:
    vars:
      additional: finetuning=ft_adam_-2 +selection.c_conditioned=sampled finetuning.max_epochs=50 finetuning.optimizer.lr=1e-2 finetuning.batch_size=512
      main: finetune.py
      fraction: 500,1000,2000,3000,4000
      seed: 0,1,2,3,4
    cmds:
      - |
        task stanfordcars:resnet18:cov_ntk \
        main={{.main}} \
        fraction={{.fraction}} \
        dataset=stanfordcars \
        seed={{.seed}} \
        additional='{{.additional}}' \
        server={{.server}}

  cifar10:full:1-epoch:ft:
    vars:
      vars:
      main: data_select.py
      additional: |
        \
        finetuning=clip_ft_adam_-1 \
        +selection.c_conditioned=False \
        finetuning.optimizer.weight_decay=0 \
        finetuning.optimizer.feature_lr_decay=1 \
        finetuning.optimizer.lr=1e-2 \
        finetuning.max_epochs=1
      backbone: clip
      seed: 0,1,2,3,4
    cmds:
      - |
        python {{.main}} -m \
          dataset=cifar10 \
          backbone={{.backbone}} \
          selection=full \
          +selection.seed={{.seed}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          hydra/launcher={{.server}} {{.additional}}

  # SkMMv2 + 512.0 + 10.0 + 0.001
  cifar10:resnet18:skmmv2:selection-2:512-10-0.001-1000:
    vars:
      main: data_select.py
      selection: skmmv2
      fraction: 1000
      seed: 0,1,2,3,4
      backbone: resnet18
      dataset: cifar10
      layers: -2
      sketching_dim: 512
      temperature: 1e-3
      block_size: 10
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.sketching_dim={{.sketching_dim}} \
            selection.fraction={{.fraction}} \
            selection.layers={{.layers}} \
            selection.temperature={{.temperature}} \
            selection.block_size={{.block_size}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}}
  
  cifar10:resnet18:skmmv2:ft-2:512-10-0.001-1000:
    vars:
      main: finetune.py
      selection: skmmv2
      fraction: 1000
      seed: 0,1,2,3,4
      backbone: resnet18
      dataset: cifar10
      layers: -2
      sketching_dim: 512
      temperature: 1e-3
      block_size: 10
      additional: |
        \
        finetuning=clip_ft_adam_-2_decay \
        +selection.c_conditioned=False \
        finetuning.optimizer.weight_decay=0 \
        finetuning.optimizer.feature_weight_decay=0 \
        finetuning.optimizer.feature_lr_decay=1 \
        finetuning.optimizer.lr=1e-2 \
        finetuning.max_epochs=50
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.sketching_dim={{.sketching_dim}} \
            selection.fraction={{.fraction}} \
            selection.layers={{.layers}} \
            selection.temperature={{.temperature}} \
            selection.block_size={{.block_size}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}
    
  cifar10:clip:skmmv2:selection-1:
    vars:
      main: data_select.py
      selection: skmmv2
      fraction: 500,1000,1500,2000,2500,3000,3500,4000
      seed: 0,1,2,3,4
      backbone: clip
      dataset: cifar10
      temperature: 1e-3
      sketching_dim: 64,128,256,512
      block_size: 5,10,15,20
      overwrite: false
      layers: -1
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.sketching_dim={{.sketching_dim}} \
            selection.fraction={{.fraction}} \
            selection.layers={{.layers}} \
            selection.temperature={{.temperature}} \
            selection.block_size={{.block_size}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}}
  
  cifar10:clip:skmmv2:selection-1:small-range:
    vars:
      main: data_select.py
      selection: skmmv2
      fraction: 50,100,200
      seed: 0,1,2,3,4
      backbone: clip
      dataset: cifar10
      sketching_dim: 32,64,128,256,512
      temperature: 1e-3
      block_size: 5,10,15,20
      overwrite: false
      layers: -1
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.sketching_dim={{.sketching_dim}} \
            selection.fraction={{.fraction}} \
            selection.layers={{.layers}} \
            selection.temperature={{.temperature}} \
            selection.block_size={{.block_size}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}}
  
  cifar10:clip:skmmv2:ft-1:small-range:
    deps:
      - cifar10:clip:skmmv2:selection-1:small-range
    vars:
      main: finetune.py
      selection: skmmv2
      fraction: 50,100,200
      seed: 0,1,2,3,4
      backbone: clip
      dataset: cifar10
      sketching_dim: 32,64,128,256,512
      temperature: 1e-3
      block_size: 5,10,15,20
      overwrite: false
      layers: -1
      additional: |
        \
        finetuning=clip_ft_adam_-1 \
        +selection.c_conditioned=false \
        finetuning.optimizer.lr=1e-2 \
        finetuning.optimizer.weight_decay=0 \
        finetuning.optimizer.feature_lr_decay=1 \
        finetuning.max_epochs=50
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.sketching_dim={{.sketching_dim}} \
            selection.fraction={{.fraction}} \
            selection.layers={{.layers}} \
            selection.temperature={{.temperature}} \
            selection.block_size={{.block_size}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}
  
  cifar10:resnet18:skmmv2:selection-2:small-range:
    vars:
      main: data_select.py
      selection: skmmv2
      fraction: 50,100,200
      seed: 0,1,2,3,4
      backbone: resnet18
      dataset: cifar10
      layers: -2
      sketching_dim: 32,64,128,256,512
      temperature: 1e-3
      block_size: 5,10,15,20
      overwrite: false
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.sketching_dim={{.sketching_dim}} \
            selection.fraction={{.fraction}} \
            selection.layers={{.layers}} \
            selection.temperature={{.temperature}} \
            selection.block_size={{.block_size}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}}
  
  cifar10:resnet18:skmmv2:ft-2:small-range:
    deps:
      - cifar10:resnet18:skmmv2:selection-2:small-range
    vars:
      main: finetune.py
      selection: skmmv2
      fraction: 50,100,200
      seed: 0,1,2,3,4
      backbone: resnet18
      dataset: cifar10
      layers: -2
      sketching_dim: 32,64,128,256,512
      temperature: 1e-3
      block_size: 5,10,15,20
      overwrite: false
      additional: |
        \
        finetuning=clip_ft_adam_-2_decay \
        +selection.c_conditioned=False \
        finetuning.optimizer.weight_decay=0 \
        finetuning.optimizer.feature_weight_decay=0 \
        finetuning.optimizer.feature_lr_decay=1 \
        finetuning.optimizer.lr=1e-2 \
        finetuning.max_epochs=50
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.sketching_dim={{.sketching_dim}} \
            selection.fraction={{.fraction}} \
            selection.layers={{.layers}} \
            selection.temperature={{.temperature}} \
            selection.block_size={{.block_size}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}
      












      
  cifar10:clip:skmmv2:selection-1:debug:
    vars:
      main: data_select.py
      selection: skmmv2
      fraction: 500
      seed: 0
      backbone: clip
      dataset: cifar10
      layers: -1
      overwrite: false
      sketching_dim: 64
      temperature: 1e-3
      block_size: 5
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.sketching_dim={{.sketching_dim}} \
            selection.fraction={{.fraction}} \
            selection.layers={{.layers}} \
            selection.temperature={{.temperature}} \
            selection.block_size={{.block_size}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}}
      

  cifar10:clip:skmmv2:ft-1:
    # deps:
      # - cifar10:clip:skmmv2:selection-1
    vars:
      main: finetune.py
      selection: skmmv2
      fraction: 500,1000,1500,2000,2500,3000,3500,4000
      seed: 0,1,2,3,4
      backbone: clip
      dataset: cifar10
      temperature: 1e-3
      sketching_dim: 64,128,256,512
      block_size: 5,10,15,20
      overwrite: false
      layers: -1
      additional: |
        \
        finetuning=clip_ft_adam_-1 \
        +selection.c_conditioned=false \
        finetuning.optimizer.lr=1e-2 \
        finetuning.optimizer.weight_decay=0 \
        finetuning.optimizer.feature_lr_decay=1 \
        finetuning.max_epochs=50
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.sketching_dim={{.sketching_dim}} \
            selection.fraction={{.fraction}} \
            selection.layers={{.layers}} \
            selection.temperature={{.temperature}} \
            selection.block_size={{.block_size}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}
  
  cifar10:clip:skmmv2:ft-1:debug:
    vars:
      main: finetune.py
      selection: skmmv2
      fraction: 500
      seed: 0
      backbone: clip
      dataset: cifar10
      overwrite: false
      temperature: 1e-3
      sketching_dim: 64
      block_size: 5
      layers: -1
      additional: |
        \
        finetuning=clip_ft_adam_-1 \
        +selection.c_conditioned=false
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.sketching_dim={{.sketching_dim}} \
            selection.fraction={{.fraction}} \
            selection.layers={{.layers}} \
            selection.temperature={{.temperature}} \
            selection.block_size={{.block_size}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}
      

  
  cifar10:resnet18:skmmv2:selection-2:
    vars:
      main: data_select.py
      selection: skmmv2
      fraction: 500,1000,1500,2000,2500,3000,3500,4000
      seed: 0,1,2,3,4
      backbone: resnet18
      dataset: cifar10
      layers: -2
      overwrite: false
      sketching_dim: 64,128,256,512
      temperature: 1e-3
      block_size: 5,10,15,20
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.sketching_dim={{.sketching_dim}} \
            selection.fraction={{.fraction}} \
            selection.layers={{.layers}} \
            selection.temperature={{.temperature}} \
            selection.block_size={{.block_size}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}}

  cifar10:resnet18:skmmv2:ft-2:
    vars:
      main: finetune.py
      selection: skmmv2
      fraction: 500,1000,1500,2000,2500,3000,3500,4000
      seed: 0,1,2,3,4
      backbone: resnet18
      dataset: cifar10
      overwrite: false
      layers: -2
      sketching_dim: 64,128,256,512
      temperature: 1e-3
      block_size: 5,10,15,20
      additional: |
        \
        finetuning=clip_ft_adam_-2_decay \
        +selection.c_conditioned=False \
        finetuning.optimizer.weight_decay=0 \
        finetuning.optimizer.feature_weight_decay=0 \
        finetuning.optimizer.feature_lr_decay=1 \
        finetuning.optimizer.lr=1e-2 \
        finetuning.max_epochs=50
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.sketching_dim={{.sketching_dim}} \
            selection.fraction={{.fraction}} \
            selection.layers={{.layers}} \
            selection.temperature={{.temperature}} \
            selection.block_size={{.block_size}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}


  cifar10:resnet18:skmmv2:selection-2:debug:
    vars:
      main: data_select.py
      selection: skmmv2
      fraction: 500
      seed: 0
      backbone: resnet18
      overwrite: false
    cmds:
      - |
        python {{.main}} -m \
          dataset=cifar10 \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.fraction={{.fraction}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}}

  stanfordcars:clip:skmmv2:selection-1:
    
    vars:
      main: data_select.py
      selection: skmmv2
      fraction: 500,1000,1500,2000,2500,3000,3500,4000
      seed: 0,1,2,3,4
      backbone: clip
      dataset: stanfordcars
      layers: -1
      overwrite: false
      temperature: 1e-3
      sketching_dim: 64,128,256,512
      block_size: 5,10,15,20
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.sketching_dim={{.sketching_dim}} \
            selection.fraction={{.fraction}} \
            selection.layers={{.layers}} \
            selection.temperature={{.temperature}} \
            selection.block_size={{.block_size}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}}

  stanfordcars:clip:skmmv2:ft-1:
    # deps:
      # - stanfordcars:clip:skmmv2:selection-1
    vars:
      main: finetune.py
      selection: skmmv2
      fraction: 500,1000,1500,2000,2500,3000,3500,4000
      seed: 0,1,2,3,4
      backbone: clip
      dataset: stanfordcars
      overwrite: false
      layers: -1
      sketching_dim: 64,128,256,512
      temperature: 1e-3
      block_size: 5,10,15,20
      additional: |
        \
        finetuning=clip_ft_adam_-1 \
        +selection.c_conditioned=false
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.sketching_dim={{.sketching_dim}} \
            selection.fraction={{.fraction}} \
            selection.layers={{.layers}} \
            selection.temperature={{.temperature}} \
            selection.block_size={{.block_size}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  stanfordcars:resnet18:skmmv2:selection-2:
    vars:
      main: data_select.py
      selection: skmmv2
      fraction: 500,1000,1500,2000,2500,3000,3500,4000
      seed: 0,1,2,3,4
      backbone: resnet18
      dataset: stanfordcars
      layers: -2
      overwrite: false
      sketching_dim: 64,128,256,512
      temperature: 1e-3
      block_size: 5,10,15,20
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.sketching_dim={{.sketching_dim}} \
            selection.fraction={{.fraction}} \
            selection.layers={{.layers}} \
            selection.temperature={{.temperature}} \
            selection.block_size={{.block_size}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}}

  stanfordcars:resnet18:skmmv2:selection-2:debug:
    
    vars:
      main: data_select.py
      selection: skmmv2
      fraction: 500
      seed: 0
      backbone: resnet18
      dataset: stanfordcars
      layers: -2
      overwrite: false
      sketching_dim: 64
      block_size: 5
      temperature: 1e-2
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.sketching_dim={{.sketching_dim}} \
            selection.fraction={{.fraction}} \
            selection.layers={{.layers}} \
            selection.temperature={{.temperature}} \
            selection.block_size={{.block_size}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}}

  stanfordcars:resnet18:skmmv2:ft-2:
    
    deps:
      - stanfordcars:resnet18:skmmv2:selection-2
    vars:
      main: finetune.py
      selection: skmmv2
      fraction: 500,1000,1500,2000,2500,3000,3500,4000
      seed: 0,1,2,3,4
      backbone: resnet18
      dataset: stanfordcars
      overwrite: false
      layers: -2
      sketching_dim: 64,128,256,512
      temperature: 1e-3
      block_size: 5,10,15,20
      additional: |
        \
          finetuning=clip_ft_adam_-2_decay \
          +selection.c_conditioned=False \
          finetuning.optimizer.weight_decay=0 \
          finetuning.optimizer.feature_weight_decay=0 \
          finetuning.optimizer.feature_lr_decay=1 \
          finetuning.optimizer.lr=1e-2 \
          finetuning.max_epochs=50
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.sketching_dim={{.sketching_dim}} \
            selection.fraction={{.fraction}} \
            selection.layers={{.layers}} \
            selection.temperature={{.temperature}} \
            selection.block_size={{.block_size}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  stanfordcars:resnet18:skmmv2:ft-2:debug:
    vars:
      main: finetune.py
      selection: skmmv2
      fraction: 500
      seed: 0
      backbone: resnet18
      dataset: stanfordcars
      overwrite: false
      layers: -2
      sketching_dim: 64
      temperature: 1e-3
      block_size: 10
      additional: |
        \
          finetuning=clip_ft_adam_-2_decay \
          +selection.c_conditioned=False \
          finetuning.optimizer.weight_decay=0 \
          finetuning.optimizer.feature_weight_decay=0 \
          finetuning.optimizer.feature_lr_decay=1 \
          finetuning.optimizer.lr=1e-2 \
          finetuning.max_epochs=50
      server: basic
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.sketching_dim={{.sketching_dim}} \
            selection.fraction={{.fraction}} \
            selection.layers={{.layers}} \
            selection.temperature={{.temperature}} \
            selection.block_size={{.block_size}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}




  stanfordcars:resnet18:skmmv2:ft-2:debug1:
    vars:
      main: finetune.py
      selection: skmmv2
      fraction: 500
      seed: 0
      backbone: clip
      dataset: stanfordcars
      overwrite: false
      layers: -2
      sketching_dim: 64
      temperature: 1e-2,1e-3
      additional: |
        \
          finetuning=clip_ft_adam_-2_decay \
          +selection.c_conditioned=False \
          finetuning.optimizer.weight_decay=0 \
          finetuning.optimizer.feature_weight_decay=0 \
          finetuning.optimizer.feature_lr_decay=1 \
          finetuning.optimizer.lr=1e-2 \
          finetuning.max_epochs=50
    cmds:
      - |
        python {{.main}} -m \
          dataset={{.dataset}} \
          backbone={{.backbone}} \
          selection={{.selection}} \
            selection.sketching_dim={{.sketching_dim}} \
            selection.fraction={{.fraction}} \
            selection.layers={{.layers}} \
            selection.temperature={{.temperature}} \
          overwrite={{.overwrite}} \
          debug={{.debug}} \
          seed={{.seed}} \
          hydra/launcher={{.server}} {{.additional}}

  docs:update:
    cmds:
      - |
        cd docs/paper
        git pull
        git add .
        git commit -m "Update paper"
        git push
